{"instruction": "Give me a Fortran function code named get_default_ii to return an integer value. The number of input arguments is 2, the first argument is an optional integer value, the type is integer; The second argument is a required integer value, the type is integer. The number of output arguments is 1, the argument is an integer value. The function will check if the optional argument is present. If it is present, the function will return the value of the optional argument. If it is not present, the function will return the value of the required argument.", "param_info": {"type_in_num": 2, "type_in": ["integer, optional", "integer"], "type_out_num": 1, "type_out": ["integer"]}, "test_case": [{"unit_test": "\n                        module test_function\n                        contains\n                            elemental function get_default_ii(i, default) result(ret)\n        integer, intent(in), optional :: i\n        integer, intent(in) :: default\n        integer :: ret\n\n        if (present(i)) then\n            ret = i\n        else\n            ret = default\n        end if\n    end function\n\n                        end module test_function\n                        \n    program main\n      use test_function\n      implicit none\n      integer :: i = 3\n      integer :: default = 5\n      integer :: ret\n\n      ret = get_default_ii(i, default)\n      print *, ret\n    end program main\n        ", "result": ["           3"]}, {"unit_test": "\n                        module test_function\n                        contains\n                            elemental function get_default_ii(i, default) result(ret)\n        integer, intent(in), optional :: i\n        integer, intent(in) :: default\n        integer :: ret\n\n        if (present(i)) then\n            ret = i\n        else\n            ret = default\n        end if\n    end function\n\n                        end module test_function\n                        \nprogram main\n    use test_function\n    \n    implicit none\n    \n    integer :: i, default, result\n    \n    i = 10\n    default = 5\n    \n    result = get_default_ii(i, default)\n    print *, result\n    \n    i = -1\n    default = 100\n    \n    result = get_default_ii(i, default)\n    print *, result\n    \n    result = get_default_ii(default=default)\n    print *, result\n    \nend program main\n", "result": ["          10", "          -1", "         100"]}, {"unit_test": "\n                        module test_function\n                        contains\n                            elemental function get_default_ii(i, default) result(ret)\n        integer, intent(in), optional :: i\n        integer, intent(in) :: default\n        integer :: ret\n\n        if (present(i)) then\n            ret = i\n        else\n            ret = default\n        end if\n    end function\n\n                        end module test_function\n                        \nprogram main\n  use test_function\n  implicit none\n  integer :: ret\n\n  ! Test case 1: i is present\n  ret = get_default_ii(i=10, default=5)\n  print *, ret\n\n  ! Test case 2: i is not present\n  ret = get_default_ii(default=5)\n  print *, ret\n\nend program main\n", "result": ["          10", "           5"]}, {"unit_test": "\n                        module test_function\n                        contains\n                            elemental function get_default_ii(i, default) result(ret)\n        integer, intent(in), optional :: i\n        integer, intent(in) :: default\n        integer :: ret\n\n        if (present(i)) then\n            ret = i\n        else\n            ret = default\n        end if\n    end function\n\n                        end module test_function\n                        \nprogram main\n  use test_function\n  implicit none\n  integer :: ret\n  integer :: i = 5\n  integer :: default = 10\n  ret = get_default_ii(i, default)\n  print *, ret\nend program main\n", "result": ["           5"]}, {"unit_test": "\n                        module test_function\n                        contains\n                            elemental function get_default_ii(i, default) result(ret)\n        integer, intent(in), optional :: i\n        integer, intent(in) :: default\n        integer :: ret\n\n        if (present(i)) then\n            ret = i\n        else\n            ret = default\n        end if\n    end function\n\n                        end module test_function\n                        \nprogram main\n    use test_function\n    implicit none\n    \n    integer :: i = 10\n    integer :: default = 5\n    integer :: ret\n    \n    ret = get_default_ii(i, default)\n    print *, ret\n    \n    i = 0\n    ret = get_default_ii(i, default)\n    print *, ret\n    \n    ret = get_default_ii(default=default)\n    print *, ret\nend program main\n", "result": ["          10", "           0", "           5"]}, {"unit_test": "\n                        module test_function\n                        contains\n                            elemental function get_default_ii(i, default) result(ret)\n        integer, intent(in), optional :: i\n        integer, intent(in) :: default\n        integer :: ret\n\n        if (present(i)) then\n            ret = i\n        else\n            ret = default\n        end if\n    end function\n\n                        end module test_function\n                        \nprogram main\n  use test_function\n  implicit none\n  integer :: i, default_val, result\n\n  ! Test case 1: i is specified\n  i = 10\n  default_val = 5\n  result = get_default_ii(i, default_val)\n  print *, result  ! Expected output: 10\n\n  ! Test case 2: i is not specified\n  default_val = 5\n  result = get_default_ii(default=default_val)\n  print *, result  ! Expected output: 5\n\n  ! Test case 3: i is specified as zero\n  i = 0\n  default_val = 5\n  result = get_default_ii(i, default_val)\n  print *, result  ! Expected output: 0\n\nend program main\n", "result": ["          10", "           5", "           0"]}], "code": "    elemental function get_default_ii(i, default) result(ret)\n        integer, intent(in), optional :: i\n        integer, intent(in) :: default\n        integer :: ret\n\n        if (present(i)) then\n            ret = i\n        else\n            ret = default\n        end if\n    end function\n"}
{"instruction": "Provide me with a Fortran function named get_default_cc. The purpose of this function is to return a character value based on the inputs provided. The function takes 2 input parameters. The first parameter is an optional character value, and the second parameter is a required character value. The function returns a character value. \nTo use this function, you can call it by providing either one or two input parameters. If you provide just one input parameter, it will return the value of that parameter. If you provide two input parameters, it will return the value of the first parameter.", "param_info": {"type_in_num": 2, "type_in": ["character, optional", "character"], "type_out_num": 1, "type_out": ["character"]}, "test_case": [{"unit_test": "\n                        module test_function\n                        contains\n                            elemental function get_default_cc(c, default) result(ret)\n        character, intent(in), optional :: c\n        character, intent(in) :: default\n        character :: ret\n\n        if (present(c)) then\n            ret = c\n        else\n            ret = default\n        end if\n    end function\n\n                        end module test_function\n                        \nprogram main\n  use test_function\n  implicit none\n  character :: ret\n  \n  ! Test case 1: c is provided\n  ret = get_default_cc('A', 'B')\n  print *, ret\n  \n  ! Test case 2: c is not provided\n  ret = get_default_cc(default='B')\n  print *, ret\nend program main\n", "result": [" A", " B"]}, {"unit_test": "\n                        module test_function\n                        contains\n                            elemental function get_default_cc(c, default) result(ret)\n        character, intent(in), optional :: c\n        character, intent(in) :: default\n        character :: ret\n\n        if (present(c)) then\n            ret = c\n        else\n            ret = default\n        end if\n    end function\n\n                        end module test_function\n                        \nprogram main\n  use test_function\n  implicit none\n  character :: c = 'A'\n  character :: default = 'B'\n  character :: ret\n\n  ret = get_default_cc(c, default)\n  print *, ret\n\nend program main\n", "result": [" A"]}, {"unit_test": "\n                        module test_function\n                        contains\n                            elemental function get_default_cc(c, default) result(ret)\n        character, intent(in), optional :: c\n        character, intent(in) :: default\n        character :: ret\n\n        if (present(c)) then\n            ret = c\n        else\n            ret = default\n        end if\n    end function\n\n                        end module test_function\n                        \n    program main\n      use test_function\n      implicit none\n      character :: c\n      character :: default = 'A'\n      character :: ret\n      c = 'B'\n      ret = get_default_cc(c, default)\n      print *, ret\n    end program main\n", "result": [" B"]}, {"unit_test": "\n                        module test_function\n                        contains\n                            elemental function get_default_cc(c, default) result(ret)\n        character, intent(in), optional :: c\n        character, intent(in) :: default\n        character :: ret\n\n        if (present(c)) then\n            ret = c\n        else\n            ret = default\n        end if\n    end function\n\n                        end module test_function\n                        \nprogram main\n  use test_function\n  implicit none\n  character :: c1, c2\n  character :: default = 'A'\n\n  c1 = get_default_cc('B', default)\n  c2 = get_default_cc('', default)\n\n  print *, c1\n  print *, c2\nend program main\n", "result": [" B", " f"]}, {"unit_test": "\n                        module test_function\n                        contains\n                            elemental function get_default_cc(c, default) result(ret)\n        character, intent(in), optional :: c\n        character, intent(in) :: default\n        character :: ret\n\n        if (present(c)) then\n            ret = c\n        else\n            ret = default\n        end if\n    end function\n\n                        end module test_function\n                        \nprogram main\n  use test_function\n  implicit none\n  character :: c = \"D\"\n  character :: default = \"A\"\n  character :: ret\n  ret = get_default_cc(c, default)\n  print *, ret\nend program main\n", "result": [" D"]}, {"unit_test": "\n                        module test_function\n                        contains\n                            elemental function get_default_cc(c, default) result(ret)\n        character, intent(in), optional :: c\n        character, intent(in) :: default\n        character :: ret\n\n        if (present(c)) then\n            ret = c\n        else\n            ret = default\n        end if\n    end function\n\n                        end module test_function\n                        \nprogram main\n  use test_function\n  implicit none\n  character :: c, default\n  character :: ret\n\n  c = 'A'\n  default = 'B'\n  ret = get_default_cc(c, default)\n  print *, ret\n\n  c = ''\n  default = 'B'\n  ret = get_default_cc(c, default)\n  print *, ret\n\n  c = 'C'\n  default = 'B'\n  ret = get_default_cc(c, default)\n  print *, ret\nend program main\n", "result": [" A", "  ", " C"]}], "code": "    elemental function get_default_cc(c, default) result(ret)\n        character, intent(in), optional :: c\n        character, intent(in) :: default\n        character :: ret\n\n        if (present(c)) then\n            ret = c\n        else\n            ret = default\n        end if\n    end function\n"}
